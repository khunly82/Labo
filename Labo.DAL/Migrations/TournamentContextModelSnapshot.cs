// <auto-generated />
using System;
using Labo.DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Labo.DAL.Migrations
{
    [DbContext(typeof(TournamentContext))]
    partial class TournamentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Labo.DL.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("BlackId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WhiteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BlackId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("WhiteId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("Labo.DL.Entities.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Categories")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentRound")
                        .HasColumnType("int");

                    b.Property<int?>("EloMax")
                        .HasColumnType("int");

                    b.Property<int?>("EloMin")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndOfRegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("int");

                    b.Property<int>("MinPlayers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WomenOnly")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Labo.DL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Elo")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("EncodedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Salt")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Salt")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a6a71a1f-699e-4a01-a3b3-89354a01ef4f"),
                            BirthDate = new DateTime(1982, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elo = 1800,
                            Email = "lykhun@gmail.com",
                            EncodedPassword = new byte[] { 40, 231, 100, 182, 70, 180, 236, 212, 130, 67, 117, 128, 122, 190, 151, 184, 27, 89, 8, 128, 136, 20, 52, 174, 234, 236, 143, 52, 40, 161, 20, 12, 116, 36, 254, 110, 76, 213, 11, 11, 109, 101, 110, 194, 68, 117, 161, 126, 30, 190, 152, 158, 21, 179, 68, 29, 246, 231, 223, 225, 41, 60, 186, 57 },
                            Gender = "Male",
                            IsDeleted = false,
                            Role = "Admin",
                            Salt = new Guid("a87100d6-1cb2-4c3d-b0b0-468d6d6ca662"),
                            Username = "Checkmate"
                        },
                        new
                        {
                            Id = new Guid("2649548b-ba8d-4f9b-b1ab-c58bc64a063b"),
                            BirthDate = new DateTime(2000, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elo = 1500,
                            Email = "j@yopmail.com",
                            EncodedPassword = new byte[] { 125, 87, 111, 213, 101, 94, 74, 103, 51, 111, 215, 126, 213, 212, 244, 226, 29, 10, 168, 162, 159, 114, 93, 88, 148, 68, 163, 199, 69, 121, 83, 139, 131, 52, 227, 162, 240, 163, 163, 165, 37, 144, 61, 152, 133, 46, 133, 7, 41, 250, 5, 144, 106, 116, 23, 81, 28, 98, 107, 250, 153, 94, 40, 19 },
                            Gender = "Male",
                            IsDeleted = false,
                            Role = "Player",
                            Salt = new Guid("3778dbeb-089f-4e4a-8429-f2c764508204"),
                            Username = "John"
                        },
                        new
                        {
                            Id = new Guid("34303638-fe61-4d76-83d3-d4ca8576542a"),
                            BirthDate = new DateTime(2000, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elo = 1800,
                            Email = "s@yopmail.com",
                            EncodedPassword = new byte[] { 251, 150, 55, 77, 13, 233, 107, 179, 32, 234, 76, 32, 51, 147, 131, 220, 35, 138, 211, 234, 86, 142, 172, 238, 148, 188, 182, 230, 254, 148, 90, 142, 145, 238, 205, 122, 201, 216, 217, 35, 71, 108, 221, 171, 200, 202, 0, 56, 214, 103, 244, 26, 5, 42, 182, 13, 189, 208, 91, 69, 186, 170, 50, 124 },
                            Gender = "Female",
                            IsDeleted = false,
                            Role = "Player",
                            Salt = new Guid("9661f007-fa05-4157-9d45-d1e1fdb22eda"),
                            Username = "Sarah"
                        },
                        new
                        {
                            Id = new Guid("f6ea3526-9298-4312-b666-a41df3af88c2"),
                            BirthDate = new DateTime(2005, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elo = 1200,
                            Email = "b@yopmail.com",
                            EncodedPassword = new byte[] { 155, 72, 145, 221, 117, 63, 188, 202, 211, 101, 199, 93, 137, 255, 150, 219, 110, 115, 26, 226, 36, 24, 230, 201, 19, 108, 104, 152, 59, 21, 176, 157, 29, 44, 38, 223, 138, 155, 70, 90, 227, 255, 110, 239, 66, 163, 118, 199, 42, 1, 229, 65, 32, 211, 203, 32, 183, 54, 146, 117, 241, 163, 173, 73 },
                            Gender = "Female",
                            IsDeleted = false,
                            Role = "Player",
                            Salt = new Guid("fa7900ef-b38f-4ef9-b6f6-896f187e831c"),
                            Username = "Brithney"
                        },
                        new
                        {
                            Id = new Guid("e578d77c-cc21-414a-b98d-1795ab13fe6e"),
                            BirthDate = new DateTime(2000, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elo = 1800,
                            Email = "r@yopmail.com",
                            EncodedPassword = new byte[] { 142, 37, 160, 155, 223, 80, 221, 129, 26, 126, 140, 163, 232, 104, 250, 190, 213, 195, 22, 175, 139, 22, 40, 85, 80, 213, 186, 116, 63, 171, 165, 183, 51, 207, 143, 39, 158, 109, 164, 107, 94, 202, 66, 63, 210, 6, 230, 174, 176, 31, 252, 220, 6, 109, 193, 246, 4, 151, 106, 141, 229, 99, 53, 130 },
                            Gender = "Male",
                            IsDeleted = false,
                            Role = "Player",
                            Salt = new Guid("32205f5c-42e4-4095-8fdd-d8b2560ce2c4"),
                            Username = "Ringo"
                        },
                        new
                        {
                            Id = new Guid("aa9dad4c-f575-4036-bb5f-c66ba0c565be"),
                            BirthDate = new DateTime(2000, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elo = 1800,
                            Email = "p@yopmail.com",
                            EncodedPassword = new byte[] { 42, 189, 61, 202, 141, 168, 248, 201, 152, 241, 47, 66, 56, 115, 180, 28, 55, 6, 233, 38, 207, 121, 116, 24, 86, 72, 102, 44, 66, 62, 154, 72, 252, 245, 8, 54, 91, 212, 176, 223, 11, 79, 192, 92, 70, 78, 177, 49, 32, 116, 159, 248, 41, 43, 143, 119, 135, 26, 240, 133, 62, 25, 49, 209 },
                            Gender = "Male",
                            IsDeleted = false,
                            Role = "Player",
                            Salt = new Guid("de88ab94-a07a-4c95-a93f-461f1b8a2ca1"),
                            Username = "Paul"
                        },
                        new
                        {
                            Id = new Guid("b4ed6087-6683-421d-9dc4-d286cd077058"),
                            BirthDate = new DateTime(2000, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Elo = 1800,
                            Email = "g@yopmail.com",
                            EncodedPassword = new byte[] { 175, 137, 165, 92, 157, 160, 33, 48, 64, 125, 46, 32, 194, 167, 215, 65, 128, 86, 74, 86, 166, 33, 220, 215, 234, 170, 13, 163, 185, 43, 238, 108, 52, 201, 11, 123, 132, 96, 151, 52, 128, 80, 101, 122, 244, 129, 103, 146, 21, 198, 24, 27, 60, 143, 14, 30, 250, 223, 15, 108, 241, 175, 133, 177 },
                            Gender = "Male",
                            IsDeleted = false,
                            Role = "Player",
                            Salt = new Guid("32311147-6328-4722-a824-480a0c083b14"),
                            Username = "Georges"
                        });
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.Property<Guid>("PlayersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlayersId", "TournamentsId");

                    b.HasIndex("TournamentsId");

                    b.ToTable("TournamentUser");
                });

            modelBuilder.Entity("Labo.DL.Entities.Match", b =>
                {
                    b.HasOne("Labo.DL.Entities.User", "Black")
                        .WithMany("MatchesAsBlack")
                        .HasForeignKey("BlackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Labo.DL.Entities.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labo.DL.Entities.User", "White")
                        .WithMany("MatchesAsWhite")
                        .HasForeignKey("WhiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Black");

                    b.Navigation("Tournament");

                    b.Navigation("White");
                });

            modelBuilder.Entity("TournamentUser", b =>
                {
                    b.HasOne("Labo.DL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labo.DL.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Labo.DL.Entities.Tournament", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Labo.DL.Entities.User", b =>
                {
                    b.Navigation("MatchesAsBlack");

                    b.Navigation("MatchesAsWhite");
                });
#pragma warning restore 612, 618
        }
    }
}
